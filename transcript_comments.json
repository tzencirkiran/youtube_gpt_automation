{
    "kPMN-gtdeig": {
        "videoTitle": "1. Git & GitHub Quick Start: Essential Basics",
        "data": {
            "transcript": "hello coders I welcome you all in this series of videos we will discuss git and GitHub which are very important and widely used Version Control Systems in the world in this video we are going to discuss the simple difference between git and GitHub we will also cover what version control is and start with Git by exploring commonly used commands so as you can see here difference between git and GitHub git is a version control system for tracking code changes locally on your computer while GitHub is a platform that host G repositories and adds collaboration features online in short please remember this get tool to manage code versions locally while GitHub is an online platform to store and collaborate on git repositories hope all of you are clear with this what is the difference between kit and GitHub now let's move on now let's understand Version Control in the simplest way let's assume that you have created a code file that prints hello right and we put it under Version Control let's call it version one meaning we are taking the first snapshot of our code please remember this we are taking first snapshot of our code this is our first version right so in the future you may add or edit the code changing it to hello world we then create another save point in Version Control and let's call it version two so please remember here we are taking another snapshot of our code assume that we have added more lines to our code or assume that we have edited our code so let's assume that for whatever reason such as an error or another issue we need to delete the current code because we cannot fix it because of some random errors so in this case we can roll back to a previous save point that we have saved as version two also we can revert back to version one as as well using G so please remember it is not just about moving to the most recent version you can roll back to any saved version as long as you know which version you want to revert to right so this is the one of the main advantages of using Version Control System like git or GitHub now let's understand how git takes snapshots means how G works so please remember there are three main things to consider when working with g or any Version Control Systems first working directory second staging area also called as staging index that you can see over here first working directory second staging area also called as staging index and third which is very important repository so now let's understand regarding this first what is the working directory don't you worry I will show you each and everything practically at the end of this video you will understand everything so let's start with what is working directory the working directory also called as working Tree in G refers to the directory on your computer where your Project's files are stored and modified it contains all the files and subdirectories of your project that is called as working directory in short our project files are stored and modified over here now let's move to second thing staging index also called as staging area so now what is the staging area or staging index the staging index or simply index in git is an intermediate area where you prepare changes before committing them to the repository it acts as a buffer between the working directory and the repository this one so it is intermediate area where we are preparing changes before committing them to this particular repository please remember this now what is the repository a repository also called as repo gate is a directory that contains all your projects files and the version history of those files please remember snapshots here we are keeping our snapshots so we can rever back to any snapshots when we required I'm repeating a repository or repo indeed is a directory that contains all of your projects files the version history of those files means snapshots and the metadata needed for Version Control it serves as a storage space for your Project's entire history and current state so this is the area where we are storing our snap shots so we can River back to any snap shots when we required it right okay hope all of you are clear with this don't do worry as I said we will do everything practically so now let's move on now let's understand how gate works you can see our three main things working directory staging area or staging index and Repository so first our code file is available over here inside our working directory currently we are working on it also we are modifying this particular code file right now after modification we want to take snapshot of this particular code file to do this we need to follow two steps please remember this first stage the file first we have to move the code file to the staging area means here we are preparing it for SNAP short right so now our code file is available inside staging area or staging index now second step we have decided to commit this particular code file commit means snapshot please remember this so our next step commit the file so next we save the snapshot of the file from the staging area into the repository and let's call it snapshot one or commit one hope all of you are clear with this right now next again assume that we we have modified our code file and again we want to take our second snapshot means our second commit again we have to perform two steps first you can see our edited file now first stage the file we have to move the updated code file to the staging area now our edited code is available inside staging area right Second Step commit the file we have to save the updated snapshot of the file from the staging area to the repository right and let's call it snapshot to means commit to in the terminology of G and GitHub we called it as commit again now suppose we want to take our third snapshot still we have modified our code file again we have to follow two steps first stet the file then commit the file this is our third snapshot our third commit hope all of you are clear with this this is the basic workflow of G and GitHub please remember this currently we are using git means our repositor is available locally on our computer in future we will work on GitHub at that time we have to move our local repository to remote repository to our GitHub Cloud that's all please remember this so in the same way you can take any number of snapshots as per your requirement and as I said you can revert back and forth means you can toggle between commits you can toggle between snapshots hope all of you are clear with this you can see our latest commit is three right but suppose I want to revert back to this version two to our second commit that we can easily do with kit that you can see over here now we are using version two now suppose in place of version two means our second commit I want to roll back to version one that also we can do easily with G or GitHub so now you can understand how G box shortly I will show you this practically so you can see I have covered some Theory to help you understand but G and gethub are practical tools so let's get handson so in the first step you have to download G currently I'm using Windows so by pressing this particular button you can download git for Windows same you can download it for Mac OS Linux or Unix as well the installation is straightforward just click next through the prompts additionally we will be using visual studio code vs code I assume that you have already installed these two things G and vs code so now let's move to the Practical part so let's get started now let's open command prompt and here I moving to the drive and let's create new directory with name Gore demo you can give any other name as well let's move inside this particular directory and let's open vs code from here by using following command code space do let's press enter you can see Visual Studio code let's open new terminal and let's check if git is installed and integrated with vs code to check this we have to write G hyphen hyen version you can see this particular version is installed on my computer now let's do another important thing please remember when we discussed a Version Control System also called as VCS VCS tracks who made which changes right so for this to work we need to tell gate who we are I'm repeating if we are working on Version Control System we have to tell the system who made which changes for this to work we need to tell G who we are right then only G can understand who made which changes so we can do this by using the git config command let me show you this let's write git config hyphen hyphen Global so as you can see here we are using hyphen hyphen Global flag to apply the settings to all G repositories on our system however you can also set different values for different repositories if needed but currently I'm using Global flag to apply these settings to all G repositories on my system so first we have to set user do name let's set it to my name done also we have to set again I'm using Global user. e mail let's set it to but prang atate gmail.com let's press enter all done now let's check it once so for that we have to use following command get config hyph Hy list you can see here user.name and user. email so when I commit it will show you this that who made which changes right hope all of you are clear with this now done let's clear this also we can use following command to check the configuration like G config user. name you can see also we can check G config user. email that you can see over here now G will understand who we are done hope all of you are clear with this so now let's move on so as you can see we have created this particular directory right so let's create one code file with name first do five and let's write some code simple code for hello world let's save our file so this is our directory which contains this code file so if you want to start Version Control for this particular code file we have to initialize repository if we want to initialize G repository we have to use G init command G space init that will initialize G repository on our system let's press enter you can see initialized empty gate repository that you can see over here so actually this initialize an empty git repository but it also creates a hidden directory named dogit let me show you this let's move to this particular folder Gore demo you can see over here so git init command creates a new doget directory in our current directory that you can see here Gore demo which is our current directory and.get which is created by g in it Command right so this directory contains all the metadata and version history for the repository after this step means after initializing G repository we can start adding files to the repository committing changes and using other git command to manage our version please remember this if you can see this. gate means we can say that we have successfully initialized gate repository G local repository at this time please remember now this particular directory Gore demo is called as working directory right so now our Gore demo becomes our working directory right so we have completed this particular step we have created working directory Dory by initializing gate repository done so as I said the working directory or working Tree in Gate refers to the directory on our computer where our project's files are stored and modified it contains all the files and subd directories for our project right so we have successfully created our working directory by initializing local git repository using git in it command now let's move on so now now we can say we have working directory and local gate repository we need to start tracking our changes so first we move our file to the staging area also known as staging Index right so we have completed this particular step get in it now we want to move our code file which is f.p to the staging area so for that we have to use this particular command G add file name this command will move our code file to staging index or staging area let's revise what is staging index or staging area please remember staging index or staging area in gate is an intermediate area where you prepare changes before committing them to the repository hope all of you are clear with this it acts as a buffer between working directory and the repository so you are wondering why I need to do this why need to put the file first into the staging area can't be directly put inside the reposit so please remember in this step we decide which files from the working directory we want to commit to the repository every time we are not adding each and every files to the suppository please remember this that we can decide at this particular step staging Step at staging index again we will discuss this practically so now let's do this let's add our code file to the staging area using this particular command let's move to V code so now that we have decided which file we want to track right first. pile so we need to add it to the staging area using following command hit add and file name first dot file let's press enter now done let's clear this now the question is how we can check whether our file is in staging area or not so for that there is very important command called as G state just let's press enter you can see here no commits yet means this file is available inside staging area you can see using this command we can on stage eight I will show you this but you can see file in the green color means this file is available inside staging area and ready to be committed to our repository so now we can say that our file in the staging area we are ready to take our first snapshot of the file this means means we can commit the file to the Version Control moving it from the staging area to the local repository so you can see now our file is available inside staging area now let's move or let's commit our file so also we can say we are going to take snapshot so for that we have to use this particular command hit commit iPhone M for the message commit message if we do this you can see now our code file is available inside gate reposit which is our first snapshot so we can say we have successfully taken our first snapshot of our code file let me show you this practically let's move to vs code as you can see currently our file inside staging area so let's clear this and we have to write G commit hyph M and here we can give commit message which is very important add basic hello word script so this is our commit message so please remember commit messages are very important so we have to give effective commit messages that will summarize changes concisely please remember also we have to use present tense here I can write added basic hello word script but as for the common gate terminology we have to use present tense another our commit message must provide context and also we have to maintain consistency this helps ensure a clear project history and and facilitates collaboration so please remember we have to write commit message properly right so now let's press enter you can see one file changed so we can say now our file is available inside our local repository and we can say that we have successfully taken our first snapshot let's check gate status once again you can see on Master Branch nothing to commit working tree clean right let's clear this and let's check gate log so using this command we can check the log of commits you can see over here author name hope all of you are clear with this that we have provided using gate config command commit was made at this particular date and time and you can see at the end commit message that we have provided so you can see commit and this is commit ID so commit IDs are those complicated looking strings that appears after the word commit in the log messages that you can see over here so this particular commit ID is the 40 characters long string so this complex number which is made up of digit and characters are actually called hash which is calculated using an algorithm called sha 1 s A1 which is cryptographic algorithm for the Simplicity just understand this is has value which allows us to identify particular commit that's all now let's create more files second. pile and let's write this is our second file let's save this also let's create our third file and let's write this is our third file let's save this file let's clear this let's check gate status you can see over here untracked files second do PI and third dot file right so these files are still not available inside staging area means these two files are currently available inside our working directory so let's add this newly created files to the staging area so as you know we can add these files to the staging area one by one like get add and file name right like this one by one but what if we have many files it can be tedious to type this command repeatedly so instead of doing this one by one we can add all the files using single command so in place of this we have to write dot dot means all let's press enter all done let's clear this and let's check gate status you can see here green color mean these two files now available inside our staging area right again let's clear this and let's check gate lock you can see over here please remember we have added these two files to the staging area but still we haven't commed subed this files that's why you can see it is not listed inside this log so please remember this now our files are available inside staging area but we have to take snapshot right so for that we have to write G commit hyphen M and commit message add second pi and third do PI let's press enter now you can see two files changed two insertions right let let's clear this and let's check log once again you can see here this is our latest commit and our previous commit that you can see over here latest commit at the top right with commit messages that you can see here so in place of G log we can also use let's first clear this G log hyphen hyphen 1 line to view the log in a concise single line format instead of many lines that you can see over here our two commits with has values that you can see here and you can see head is pointing to master which represents the current state or position inside our repository don't you worry we will discuss when we will discuss branching again let's check gate status you can see here on Branch Master nothing to commit working tree CLE now done hope all of you are clear with basic workflow of get so now you can see this is our third file assume that our content has been lost for whatever reason right let's save our file as you can see our contents have been updated let's check gate status you can see this particular file is modified right but please remember still our file is available inside our working directory not inside this staging area right so now we can use this particular command k space diff for difference and our file name you can see here one line is removed and this many lines are added and you can see over here a thir do PI and B thir do PI so you can see it is maintaining different versions of our file and here you can see minus so this line has been removed and these three lines are added this is in red color which is removed and added in green color that you can see here so now what to do our content has gone so please remember we can roll back so for that we need to use following command let's clear this we have to write G checkout her. p and please remember currently our file is available inside our working directory not inside our staging area right so let's press enter please look at here done so this way we can roll back to our previous commit that you can see over here so please remember get check out restore files to the latest stored snapshot reverting any changes before staging right hope all of you are clear with this we will discuss this in detail in upcoming videos right but hope all of you are clear with this now let's move on so now let's create four files fourth dot file this is our fourth file let's save this file let's create temp. file assume that this contains API key also username and password right let's save this file so let's assume that we have one file t.p that contains sensitive information that you can see over here like AWS Account Details or an API key or for particular login username and password which we don't want to commit means we want it will not become the part of the repository right so first let's check gate status you can see untrack files let's clear this and let's add these files to the staging area right as I said our temp. PI contains some sensitive information that we don't want to commit but as you can see these files are available inside staging area because just we have added now what to do first we have to un un stage all the files all the files we have to use dot if you want to unstage only particular file then we have to write file name that we want to unstage I want to unstage all the files so let's press enter let's clear this and now let's check G status you can see over here these two files are unstaged that you can see over here now as I said we don't want to commit this particular file so for that we have to create very important file get ignore or we have to list all the files that we don't want to commit inside this particular file dogit ignore file dogit ignore it starts with DOT means it's a hidden file let's save this fine you can see we have listed this particular file inside dogit ignore file so now git will skip this particular file it will ignore this particular file it will not commit this particular fine now once again let's check gate status you can see here P has been removed that you can see here let's clear this now let's add files to the staging area all the files again let's check gate status you can see here this file has been scaped because we have listed inside do gate ignore F so please remember this now these files are inside our staging area so we can commit it get commit hyph M add fourth DOT fine done let's check G log 1 you can see here so hope all of you are clear with this please remember we need to list all the files inside this particular file this particular hidden file dog ignore that we don't want to commit hope all of you are clear with this this is very important concept I think I have covered basic workflow of G so we will discuss more about git and GitHub in upcoming videos hope all of you are clear with basic workflow of git now let's revise first step when you start Version Control we have to initialize gate repository using gate in it command to start Version Control for our project right Second Step stage files so this is our code file that we have to put inside staging area so we have to add the files that we want to track to the staging area using this particular command G add file name if you want to add all the files you have to write G add dot dot means all the files right so here we are preparing them for commit so we have completed Two Step first initialize the kit repository and we have added our files to the staging area or staging index now third step commit files move the files from the staging area to the git repository using this particular command G commit hyphen M and here we have to give commit message now you can see our file is available inside gate repository this is the most basic workflow of gate now next update and commit so when we modify files means we add content to the files or remove the content from the files we have to perform two steps first this after modifying the file we have to add it to the staging area using this particular command and in the Second Step you have to commit the changes using git commit iPhone M commit message to the git repository that's all this is the basic workflow of G hope all of you are clear with this more regarding git and GitHub we will discuss in the upcoming videos hope you like this video please don't forget to subscribe this channel if you like this video smash that like button thank you very much for watching this video take care bye-bye see you in the next video",
            "comments": [
                "Very clear and on point. It couldn't get easier than this."
            ]
        }
    },
    "x-qYe5xs4Ic": {
        "videoTitle": "2. GitHub Basics: Version Control Made Simple",
        "data": {
            "transcript": "hello cters I welcome you all in the last video we explored the local implementation of Version Control using gate right we learned how to track changes in files commit them and navigate between different versions of our project today we are going to take things a step further by introducing remote repositories which is very important using remote repositories like GitHub we can collaborate with others back up our projects and make our work accessible from anywhere we will walk through the process of connecting our local repository to a remote one and discuss the essential commands we will need like gate push and gate pull which is very important in managing project by the end of this video you will have the tools to manage your code across multiple machines and work with teams effortlessly so let's get started let's say you are working on a project and a friend wants to collaborate you could share the code using a pen drive email or Google Drive Right but how will they check your code and add theirs every time they make changes you will have to combine their code with yours manually and that can be meshy is there any better way to do this yes using G and GitHub you upload your code to GitHub they download it make changes and upload that code back to GitHub GitHub tracks all changes so you both know what was changed and by whom no conf Fusion no mesh just smooth collaboration let's break it down visually so here's you and here's your friend in the middle we have the central repository on GitHub which is in the cloud right so right now the latest code is available on GitHub let's assume that you will pull the latest code from GitHub work on adding a new feature and then push your changes back to GitHub after that your friend will pull the latest code from GitHub and add their own feature and push the changes back and this process goes on until the software is fully developed every time someone pushes and pulls G tracks the changes making collaboration smooth and organized now here the best part is this is not limited to just two people any number of people can collaborate this way whether it is 2 10 or 100 Developers GitHub manages all changes efficiently allowing everyone to collaborate to the project hope all of you are clear with this now that we understand how collaboration Works let's jump into the Practical part first you will need a GitHub account if you don't already have one go to github.com that you can see over here and click on sign up button it's free and easy to set up enter your details like username email and password follow the steps to verify your account and you are done once you have a GitHub account you can create your first repository and start collaborating let me show you how to create a new repository on GitHub using your browser you can see this is my GitHub account so once you are logged in into your GitHub account click on the plus icon here at the top right corner and select new repository now here we have to give our repository name something relevant to your project let me give get test demo you can give any but something relevant to your project here we can add an optional description to explain what your project is about and it is optional now next choose whether you want the repository to be public or private by default you can see it is Public public means anyone can see it private only you and collaborators can see it currently I'm keeping it public next initialize this repository with add a redmi file you can choose to add a redmi file by clicking here this file helps explain the project to anyone visiting your repository but currently I'm not adding it also we can add read me file afterwards also add dog ignore that we can add from here but I will show you this at the end now finally click on create Repository so once you click on create repository it will show you the page like this now as you know we have already created our local repository in our last video right now let's connect our local repository to remote repository which is available on GitHub as you can see after clicking on create repository it will show you these two options first and second first create a new repository initialize a new G repository add me file and pushes it to GitHub and second option push an existing repository connects your existing local git repository to GitHub and pushes your code on GitHub this allows you to start Version Control and collaboration using GitHub all right since we have already created our local git repository let's move on to pushing it to GitHub this step is crucial for sharing your code online and collaborating with others so as we just did discussed we have already created our local gate repository so here we are selecting the Second Step so for that we have to use these two commands first and this third one now let's move to vs code step one add GitHub remote so first we need to link our local repository to the GitHub repository means to our remote repository which is available on GitHub we do this by adding a remote repository using following command kit remote add origin and we have to copy this particular link this one which is address of our remote repository let's copy this by pressing this button let's back to vs code and let's paste it over here this command connects our local repository to the remote repository available on GitHub here you can see this is command and here you can consider this as a variable name so here origin is just a name we can give to this link you can give any but by convention we are using this particular name origin right and the URL is where our GitHub repository is available right let's press enter now done now that we have linked our local repository to the remote GitHub repository now let's verify this connection here we are going to check whether our local repository is connected to remote GitHub repository or not to check the remote repository details we have to use following command get remote hyphen V you can see over here this command leads the remote connections link to our local repository it shows the URLs for both fetching and pushing code to the remote repository that you can see over here this URL for fetching the code and this URL for pushing the code to the remote repository actually both are same so now you can see we have confirmed that our connection to the remote remote repository is set up now let's push our local repository to remote repository which is available on GitHub let's clear this and let's check gate log hyphen hyphen 1 line you can see over here total we are having these three commits now to upload our local commits and files to GitHub we have to use following command get push origin that just we have set up and master master is our current branch which is available in our local repository don't you worry we will discuss branching and merging in the detail in our upcoming videos but just remember this is our Master branch and currently we are having only one branch Master right let's press enter now you can see all done now let's verify that our changes have been successfully pushed to GitHub let's move to GitHub and let's reload this page now done you can see over here here we haveg ignore file that we have already created in our last video and these all python files that we have created in our last video previously these files were available inside our local repository and because of this following command we have pushed all commits and our files to our remote repository which is available on GitHub that you can see over here and you can see commit history on GitHub let's click over here you can see same commits we made locally that you can see over here so our local commits that we have post on GitHub that you can see over here exactly same right let's click on this particular commit you can see over here it is showing if view that we have already discussed diff Command right let's back let's click on this particular commit here you can see plus sign and here also plus sign so lines that were added in this particular commit that you you can see over here let's move back and let's click over here you can see here plus sign this particular line was added in this comit right you can see if lines were removed are highlighted with minus hope all of you are clear with this let's move to insights and network you can see over here different commits so from here we can gain a visual understanding of our repositories activity including commit history and contributions that you can see over here from insights and network that you can see over here our three comets now let's review everything that we have done so as you know we have initialized the git repository using this particular command git in it we have added our files to the staging area using this particular command G add dot dot means all now our files are available inside staging area now we have saved a checkpoint means our snapshot in our local repository with this particular command get commit hyph M and commit message now you can see our files are available inside our local repository means our snapshots are available inside our local repository doget directory right hidden directory that I showed you in the last video which is our local repository now in this video we pushed our local repos itory with code and commits to the remote repository which is available on GitHub using G push Command right so we have done up to this hope all of you are clear with this so now our files are available on remote repository on GitHub so we can collaborate with others hope all of you are clear with this now let's move on so now we have completed our first part push the changes to GitHub right from our local repos now let me show you how to pull changes from the remote repository which is available on GitHub this is useful when you want to update your local repository with the latest changes made by others or from different devices let's check log let's move to vs code let's clear this get log hyphen hyen 1 line right you can see head which is pointing to master consider this as a local and this is for remote currently both are at the same location this means your local Master branch is now in sync in synchronization with the remote origin Master which is available on GitHub we can say our local repository is up to date with the remote repository and includes the latest changes because here head is pointing at the same location right now let's add a new file taste dot pile let's add this is test file let's save our file let's check G status you can see untrack files let's clear this G add dot let's add this file to our staging area let's check G status you can see now this particular file is also available inside our staging area now let's commit means let's take snapshot add tast dop done now you can see this particular file is available inside our local repository right let's check G log hyph hyphen one line you can see now head is pointing over here and our remote branch is over here right that you can see the main difference since we haven't pushed the latest commit yet our head is pointing over here shows the new commit locally while this origin/master indicates the previous commit on GitHub so now we have to synchronize this so now let's push our code to our remote repository which is available on GitHub let's clear this kit push origin Master let's press enter now done let's clear this again let's check G log hyphen hyph one line now you can see the difference here is pointing over here now you can see head pointer is changed both are at the same location because just first we have posted our code to get up that you can see over here this means our local Master branch is now in sync with the remote origin master that you can see over here hope all of you are clear with this now let's assume that your friend has now pulled the repository on his local machine and updated the code now let's consider this scenario here's you and here's your friend in the middle we have the central repository on GitHub which is in the cloud right so right now the latest code is available on GitHub and as you know we have already pulled the latest code from GitHub also we worked on it assume that we have added new feature and also we have pushed our changes back to get up now suppose your friend is currently adding a new feature to our project so after that your friend will pull the latest code from giup and add their own feature and pull push the changes back now we have already discussed how to push our code on GitHub right now I'm treating myself as my friend and I'm going to push this code on GitHub please remember I treating myself as my one of the friend or one of the teammate and I'm going to push the changes back to the GitHub by adding one new feature from my side as we discussed we assume that our friend has now pulled the repository updated the code and pushed the changes back to hub for Simplicity I'm going to create file directly on GitHub let me show you this this side let's move to GitHub let's move to our repository and here my friend is pushing The Code by adding one new feature from there side let's create new file let's give file name newcore feature do pip write print statement add new feature let's press this particular button commit changes let's give commit message add new feature and let's press commit changes you can see our friend has added this particular file on GitHub right so please concentrate this file is available on GitHub but this file is still not available in our local copy at my side that you can see over here right so that particular file is not available over here so let's clear this and now we have to pull the updated code which is available on GitHub because one of our friend has updated the code and already pushed the code on GitHub now it's my time to pull the latest code available on GitHub so for that we have to write following command get pull origin Master because now we want to pull the latest code from the GitHub let's press enter please look at here new feature added by our friend that you can see over here new feature dop and one line is added you can see one file changed one insertion that you can see over here and this particular file which is posted by our friend is available locally that you can see over here hope all of you are clear with this so this is how pulling and pushing changes happen between developers up to the final product development that's all so now let's discuss one more thing as you know we have already discussed dog ignore file in our last video right we have created this particular file and we have listed this particular file temp. Pi inside this particular file dog ignore because we want get ignore this particular file because it contains some sensitive information right like API key username password Etc so that we don't want to commit right so so this way we can create dogit ignore file and we can list the files we want to skip but there is also dogit ignore file available on GitHub with a list of the most commonly ignored files which we can directly use in our project let me show this let's move to GitHub let's move to our repository and let's create a new file and here we have to write dotg please look at here git ignore you can see over here choose. G ignore template search for python you can see over here as I said dog ignore file available on GitHub with a list of the most commonly ignored files that you can see over here so most commonly ignored files are already mentioned in this particular file which is available directly on GitHub additionally we can add any specific files that we want to IGN right that we have to add in this particular file first let's commit changes let's give commit message add dogit ignore file let's press this button commit changes you can see the particular message a file with the same name already exist please choose a different name and try again because as you know we have already created this particular file and just we push everything on GitHub right and explain you this concept I have to delete that particular file let's close this let's move over here and this is the file and let's click delete the file and let's press commit the changes delete. get ignore local let's press commit changes now done file successfully deleted now again let's press create new file and let's search for G ignore you can see over here now we have to to choose the template and selecting python you can select as per your requirement right you can see as we discussed earlier dog ignore file available on GitHub with a list of the most commonly ignored files that you can see over here right and as I said we can add any specific files that we want to ignore other than this but commonly ignored files are already available over here in this particular list now let's click here commit changes add new do get ignore let's press this button commit changes now done that you can see over here so now please remember this particular file is now available on GitHub but this is our old file dog ignore that we have created in our last video right so again as you know we have to do hit pull origin Master let's press enter now you can see over here dog ignore that we have added on GitHub now available in our local repository as well right and as I said we can add any specific files that we want to ignore as you know we want to ignore this particular file because it contains API key and username and password that we don't want to commit let's move tog ignore file and let's list this particular file save our file let's clear this again let's check G status you can see over here this file is modified because now this updated code is available into our local repository but now it's not available on GitHub to our remote repository right so again we have to follow same steps git add dog commit M for message add temp dopin dog ignore file let's press enter now done now let's check over here on GitHub you you can see over here temp. Pi is still not available over here you can see this code is not up to date right because here locally we have added this particular file to dog ignore file so we have to push our code g push origin Master let's press enter now done let's check it status all done on Branch Master nothing to commit working tree clean let's check on get up let's reload our page you can see over here now temp. Pi is available over here inside gate ignore template you can see over here but you can see that temp. Pi is not available over here because we have ignored that particular file because it contains some sensitive information that we don't want to commit hope all of you are clear with this right our entire flow of GitHub so as I said this is how pulling and pushing changes happen between developers up to the final product that development hope all of you are clear with this right so just you have to remember this particular scenario that we have discussed here's you and here's your friend in the middle we have the central repository which is available on GitHub means which is in the cloud right now the latest code is available on GitHub right that we have assumed so you will pull the latest code from GitHub work on adding new feature and then push your changes back to get up right after that your friend will pull the latest code from GitHub add their own feature and push the changes back to GitHub and this process goes on until the software is fully developed every time someone pushes or pulls get tracks the changes making collaboration smooth and organized hope all of you are clear with this hope you like this video please don't forget to subscribe this channel if you like this video smash that like button thank you very much for watching this video take care bye-bye by-bye see you in the next video",
            "comments": [
                "If I pulled a .py file from Github and then meanwhile my friend made few changes to the same .py and pushed it to github. Now when i push it to github, will my friend's changes be lost?",
                "Great Job, working on your Pandas series and checked just now that you are still active. Keep it up.."
            ]
        }
    },
    "sGS-0Xll0Gc": {
        "videoTitle": "3. Git & GitHub Branching and Merging: A Step-by-Step Guide​",
        "data": {
            "transcript": "hello codat I welcome you all in the last video we discussed GitHub remote repository right now in this video we are going to talk about branching and merging using git and GitHub which are crucial Concepts in software development branching allows us to create a separate copy of our project where we can work on new features bug fixes or experiments without affecting the main project once we are done and everything looks good we can merge these changes back into the main branch let's dive in and explore how branching and merging work using a simple example of a calculator project before we move to the Practical part let's discuss here first so initially we have only one branch called as master or main branch that you can see over here this one so our main project is on the master Branch or main branch so on the master or main branch we add the basic features like addition and subtraction you can consider these circles as commits this branch is stable and not affected by new developments after that we will create a new Branch with name multiplication to work on editing the multiplication feature this keeps our changes separate from the main branch or Master branch that you can see over here main branch and this is Branch one we called it as multiplication Branch right so this keeps our changes separate from the master Branch or main branch Master Branch remains unchanged during this process so on the multiplication Branch we add and taste the multiplication feature we can call this Branch as experimental Branch because here on this Branch we can perform different experiment on the feature that we want to create as I said this keeps our changes separate from the master Branch right means the master Branch remain unchanged or unaffected during this process simultaneously we can continue our development on the master branch and we will add modulus means remainder feature on the master Branch or main branch next we will create a new branch called division Branch for adding the division feature we will develop and test the division feature on this particular Branch division Branch keeping the Master Branch unaffected right once everything is working well on the multiplication Branch we will merge it back into the master Branch this integrates the new multiplication feature into the main project after testing we merge the division Branch into the master Branch updating the main project with the new feature division right finally we push the updated Master Branch to GitHub to save our changes online and make them available to others you can see by using branches we keep our Master Branch stable and introduce new features in a controlled way that you can see over here okay let's discuss all this practically to explain you the concept of branching and merging we are going to develop same structure that you can see over here at the end I will show you the same structure on the GitHub as well so let's get started as I said we are going to explore how branching and merging work using a simple example of a calculator project so let's get started so now first let's open command prompt let's move to D drive and let's create a new project directory using this particular command mkd kcore project let's press enter and let's navigate into this particular directory now let's open the directory in vs code for that we have to write following command code space dot let's press enter now let's click on terminal and let's create new terminal now let's initialize a new gate repository to initialize a new G repository we have to write g in it command you can see initialized empty gate repository at this particular location and as you know doget is our local repository so as we discussed our main project is on the master Branch or main branch so on the master or main branch we will add the basic features like addition and subtraction let's do this let's create new file Kelsey dop you can give any other name as well and let's create Logic for Addis X comma Y and let's return x + y now you can see we have created function for addition of two numbers and let's call this function if underscore uncore name underscore uncore is is equal to underscore uncore maincore then only call this function and let's print result on the console let's save our file let's check gate status you can see untrack files kelsey. Pi let's clear this and let's add this file to the staging area let's commit the changes add addition features let's press enter now done you can see we have completed this part let's complete this part let's create Logic for subtraction and as you know we are on the main or Master Branch right let's do this so here def sub X comma Y and let's return x - Y and let's call this function with two numbers you can use any other number as well also you can use input function to get input from the user let's save this file let's clear this and let's check G status you can see because just we have modified this file and add this particular feature for subtraction as you can see we are on Master branch and change is not staged for commit that you can see over here so let's clear this let's add it to staging area and let's commit the changes add subtraction features let's press enter now done so just we have completed this part so now let's push our changes to remote repository which is available on GitHub but first we have to create a remote repository so let's move to GitHub so from here let's create new repository I'm using same name kelore project I'm keeping other things as it is let's press create repository let's copy this URL let's move to vs code let's clear this and let's write git remote add origin and this URL let's press enter now let's push our code to GitHub using following command kit push origin Master let's press enter now all done let's check let's reload this page from here you can see over here our code now let's move to insights and n Network you can see over here our two commits so you can see this is the process we have gone through and our two commits that you can see so you can see the graphical representation showing what's going on you can see same that we have created over here right now let's move on let's clear this and let's check Branch so you can see currently we are on Master Branch because we have just one branch Master right and this asteris represent current we are on which branch right so we are on Master Branch so we have completed up to this right so as we discussed we will make a new Branch with name multiplication right to work on adding the multiplication feature this keeps our changes separate from the master Branch right so on the multiplication Branch we add and test the multiplication feature as I said we call this Branch as experimental Branch the main branch remains unchanged or unaffected during this process so let's do this let's create a new Branch multiplication Branch right let's move to vs code to create new Branch we have to write following command G branch and here we can give Branch name let's give multiplication you can give any other name as well let's press enter now let's check to check branches we have to write following command G Branch you can see our new new branch has been created but currently we are on this particular Branch Master Branch right so now let's switch to multiplication branch that just we have created so for that we have to write following command get check out multiplication let's press enter you can see this particular message switched to Branch multiplication let's first clear this and let's check as you can see currently Aster pointing over here because V are on multiplication Branch so now let's add multiplication feature on multiplication branch which is separate from the master Branch Master Branch remains unchanged during this process let's return X into Y and let's call this function with two values 10 and 20 you can use any let's save this file and let's run this code you can see our code is working properly right let's clear this let's check gate status you can see let's clear this gate add dot we are adding it to the staging area and let's commit the changes add multiplication features let's press enter now done so let's move to our flow as you can see we have completed this this and also we have created New Branch multiplication Branch so as we discuss simultaneously we will continue our our development on the main branch as well so let's add new feature on the main branch or Master Branch modulus feature means remainder feature on the main branch let's do this so let's check gate Branch you can see we are on multiplication Branch so let's move back to master Branch because we want to continue our development on Master Branch as well but can you see something as you can see the multiplication feature is not available on this particular code because currently we are on Master branch that you can see over here because we wrote multiplication code on the multiplication branch that you can see over here changes made in that Branch stay separate from the main branch until we merge them please remember this that you can see here now let's add new feature mode X comma Y and let's return X mode y let's save this and Also let's call this function with two values let's save this file let's clear this also let's tast our code now it's working properly let's check G status you can see let's clear this so let's add this file to staging area let's perform commit add modulus features let's press enter now done now let's push our code to GitHub get push origin Master let's press enter now done let me show you this let's reload this page and you can see over here add addition features add subtraction features and add modulus features right it is just showing Master Branch let me show you our flow so we have completed this part also we have created this particular Branch multiplication Branch also we have created modulus feature on the master Branch now we are going to create another Branch with name division let's do this let's create new Branch with name division right let's move to vs code so let's clear this and as we discussed we are going to create a new branch called division for adding the division feature first let's check currently we are on Master Branch so let's create new Branch with name d you can give any let's press enter let let's move to this particular Branch you can see switched to Branch du for division let's clear this and also we can check like this G Branch you can see currently we are on division Branch you can see and let's add code for division X comma Y and left so return X ided by y if y not equal to zero else return can't divide by zero let's save this file and don't forget to call this function and also here we are printing the result on the console 10 comma 0 Let's save this file let's check this file you can see can't divide by zero let's change it to two let's save this file let's clear this let's rerun our file now our code is working properly right again let's clear this let's check G status you can see this particular file is modified let's clear this let's add it to staging area let's perform the commit add division features let's press enter now done let's check Branch you can see currently we are having three branch one master Branch one multiplication branch and one division Branch let's check our flow we have completed this we have created multiplication Branch also modulus feature on master or main branch also just we have created division Branch so as we discuss once everything is working well on the multiplication Branch we will merge it back to the master Branch let's do this let's merge multiplication Branch into the master Branch let's move to vs code let's clear this let's check so first to merge multiplication Branch into the master Branch we have to move to the master branch Branch you can see currently we are on Master Branch let's clear this and we assume that we satisfied with the feature we developed on multiplication branch and it's working fine that's why we are going to merge multiplication Branch into the master branch do that we have to write following command please remember currently we are on the master Branch let's merge G merge and Branch name that we want to merge multiplication let's press enter you can see here here we have to resolve the conflict you can see first accept current change this is current change and this is incoming change four options accept current change accept incoming change accept both changes compare changes you can see actually we require both the changes right so let's press accept both changes same over here we want this current change and incoming change as well so let's press accept both changes done let's clear this let's check gate status you can see this particular file is modified let's clear this don't forget to save the file let's add it to the staging area let's commit the changes merge multiplication features let's press enter let's push our code to GitHub using following command G push origin Master let's press enter now done let's check on GitHub let's reload this page you can see over here our first commit our second commit and also this modulus features that we have added and you can see over here from second commit we have added multiplication features that you can see over here and here we merge multiplication features to our Master branch that you can see over here exactly same as we followed over here right up to this hope all of you are clear with this now let's move on so just we have merged the multiplication feature to the master Branch so as we discussed once everything is working well on the division Branch we will merge it back to the master Branch right so now we are going to do this we are going to merge division Branch with the master Branch let's do this let's move to vs code let's clear this let's check Branch we are on Master Branch right and let's assume that we satisfied with the feature we developed on the division Branch so that's why we are going to merge division Branch into Master Branch so for that we have to write G merge and Branch name let's press enter you can see over here as you know we want both so we have to press this accept both changes now done let's save our file let's clear this let's check G status you can see modified this particular file kelsey. Pi let's clear this let's add it to staging area and let's perform the commit merge division Branch let's press enter let's push our code to GitHub get push origin Master let's press enter all done let's check on get let's reload this file you can see over here add division feature and here we merge it back to the master branch that you can see over here so you can see this is the process we have gone through both are exactly same that you can see over here and here you can see graphical representation which is showing what's going on that you can see if you compare this both we can say that we have created the exact structure that we have decided at the beginning that you can see over here both are exactly same hope all of you are clear with the concepts of branching and merging which is very important right so now let's move on let's back to vs code let's clear this so after successfully merging feature branches into the main branch we can delete the feature branches this helps keep your repository clean and organized reducing clutter from unused branches right so let's delete feature branches that just we have developed let's check branches and we have two branches Division and multiplication now we have merged these feature branches into the main branch so we can delete this right that will keep our repository clean and organized let's do this so please remember we are going to delete a branch locally to do that we have to write following command G Branch hyund D and name of the branch multiplication let's press enter done also let's delete division Branch done let's clear this and let's check Branch you can see currently we have just one branch Master branch and our entire code is available on Master branch that we have developed using branching and merging Concepts that you can see over here right let's run it once you can see over here our code is working fine on the master Branch all done so please remember we can also delete the remote branches that we have post on GitHub but we are not going to do this right just we have deleted branches locally please remember this I hope all of you are clear with branching and merging right hope you like this video please don't forget to subscribe this channel if you like this video smash that like button thank you very much for watching this video take care bye-bye see you in the next video",
            "comments": [
                "Sooper"
            ]
        }
    }
}